package source.task;

import org.apache.commons.io.FileUtils;
import org.apache.kafka.connect.data.Schema;
import source.connector.HexGraphSourceConnector;
import org.apache.kafka.connect.source.SourceRecord;
import org.apache.kafka.connect.source.SourceTask;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.imageio.ImageIO;
import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import static source.config.HexGraphSourceConnectorConfig.DIRECTORY_SINK;
import static source.config.HexGraphSourceConnectorConfig.DIRECTORY_SOURCE;
import static source.config.HexGraphSourceConnectorConfig.TOPIC_NAME;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'jack' at '8/01/18 3:30 PM' with Gradle 2.10
 *
 * @author jack, @date 8/01/18 3:30 PM
 */
public class HexGraphSourceTask extends SourceTask {
    public static final Logger LOG = LoggerFactory.getLogger(HexGraphSourceTask.class);

    private String topic;
    private String directorySourceName;
    private String directorySinkName;

    @Override
    public String version() {
        return new HexGraphSourceConnector().version();
    }

    @Override
    public void start(Map<String, String> props) {
        LOG.info("Image source task starting.");

        topic = props.get(TOPIC_NAME);
        directorySourceName = props.get(DIRECTORY_SOURCE);
        directorySinkName = props.get(DIRECTORY_SINK);
    }

    @Override
    public List<SourceRecord> poll() throws InterruptedException {
        File sourceDirectory = new File(directorySourceName);
        File sinkDirectory = new File(directorySinkName);

        if (!sourceDirectory.isDirectory()) {
            throw new RuntimeException(sourceDirectory.getName() + " is not a directory.");
        }

        File[] sourceFiles = sourceDirectory.listFiles();

        List<SourceRecord> sourceRecords = new ArrayList<>();

        for (File sourceFile : sourceFiles) {
            try {
                if (ImageIO.read(sourceFile) == null) {
                    LOG.info(sourceFile.getName() + " is not an image.");
                    continue;
                }

                LOG.info(sourceFile.getName() + " " + sourceFile.getCanonicalPath());

                sourceRecords.add(new SourceRecord(Collections.emptyMap(), Collections.emptyMap(), topic, Schema.STRING_SCHEMA, sourceFile.getCanonicalPath()));
                FileUtils.moveFileToDirectory(sourceFile, sinkDirectory, true);
            } catch (IOException e) {
                LOG.error(e.getMessage());
            }
        }

        return sourceRecords;
    }

    @Override
    public void stop() {
        LOG.info("Image source task stopping.");
    }
}
